# CuraBot Database Schema

This document outlines the database schema for the CuraBot application. It includes all tables, their columns, data types, relationships, and descriptions to support the application's functionality.

## Table of Contents
1. Users
2. Doctors
3. Specialties
4. Appointments
5. AvailableSlots
6. ChatMessages
7. Symptoms
8. SymptomSpecialtyMapping

---

## 1. Users

Stores information about all users of the application, including patients and doctors.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the user               |
| email         | VARCHAR(255) | UNIQUE, NOT NULL  | User's email address                         |
| password_hash | VARCHAR(255) | NOT NULL          | Hashed password                              |
| first_name    | VARCHAR(100) | NOT NULL          | User's first name                            |
| last_name     | VARCHAR(100) | NOT NULL          | User's last name                             |
| role          | ENUM         | NOT NULL          | 'patient' or 'doctor'                        |
| phone         | VARCHAR(20)  |                   | User's phone number                          |
| created_at    | TIMESTAMP    | NOT NULL          | When the user account was created            |
| updated_at    | TIMESTAMP    | NOT NULL          | When the user account was last updated       |

Notes:
- The `role` field determines whether the user is a patient or a doctor
- For doctors, there will be a corresponding entry in the Doctors table

---

## 2. Doctors

Contains detailed information about doctors in the system.

| Column          | Type         | Constraints       | Description                                  |
|-----------------|--------------|-------------------|----------------------------------------------|
| id              | UUID         | PK, NOT NULL      | Unique identifier for the doctor             |
| user_id         | UUID         | FK, NOT NULL      | Reference to Users table                     |
| specialty_id    | UUID         | FK, NOT NULL      | Reference to Specialties table               |
| image           | VARCHAR(255) |                   | URL to doctor's profile image                |
| rating          | DECIMAL(3,2) |                   | Average rating (0.00-5.00)                  |
| experience      | INTEGER      |                   | Years of experience                          |
| location        | VARCHAR(255) | NOT NULL          | Doctor's practice location                   |
| bio             | TEXT         |                   | Doctor's biographical information            |
| calendar_enabled| BOOLEAN      | DEFAULT TRUE      | Whether Google Calendar integration is enabled|
| created_at      | TIMESTAMP    | NOT NULL          | When the doctor profile was created          |
| updated_at      | TIMESTAMP    | NOT NULL          | When the doctor profile was last updated     |

Notes:
- `user_id` references the Users table to link doctor profiles to user accounts
- `specialty_id` references the Specialties table to indicate the doctor's area of expertise
- `calendar_enabled` indicates whether the doctor has enabled Google Calendar integration for appointment syncing (enabled by default)

---

## 3. Specialties

Defines medical specialties available in the system.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the specialty          |
| name          | VARCHAR(100) | UNIQUE, NOT NULL  | Name of the specialty (e.g., "Cardiology")   |
| description   | TEXT         |                   | Description of the specialty                 |
| created_at    | TIMESTAMP    | NOT NULL          | When the specialty was created               |
| updated_at    | TIMESTAMP    | NOT NULL          | When the specialty was last updated          |

Notes:
- This table will be pre-populated with common medical specialties
- Used for categorizing doctors and matching symptoms to specialties

---

## 4. Appointments

Stores information about appointments between patients and doctors.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the appointment        |
| patient_id    | UUID         | FK, NOT NULL      | Reference to Users table (patient)           |
| doctor_id     | UUID         | FK, NOT NULL      | Reference to Doctors table                   |
| date          | DATE         | NOT NULL          | Date of the appointment                      |
| time          | TIME         | NOT NULL          | Time of the appointment                      |
| status        | ENUM         | NOT NULL          | 'upcoming', 'completed', 'cancelled'         |
| location      | VARCHAR(255) | NOT NULL          | Location of the appointment                  |
| notes         | TEXT         |                   | Additional notes about the appointment       |
| created_at    | TIMESTAMP    | NOT NULL          | When the appointment was created             |
| updated_at    | TIMESTAMP    | NOT NULL          | When the appointment was last updated        |

Notes:
- `patient_id` references the Users table (where role = 'patient')
- `doctor_id` references the Doctors table
- The combination of `doctor_id`, `date`, and `time` should be unique

---

## 5. AvailableSlots

Defines the available time slots for doctors.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the slot               |
| doctor_id     | UUID         | FK, NOT NULL      | Reference to Doctors table                   |
| date          | DATE         | NOT NULL          | Date of availability                         |
| start_time    | TIME         | NOT NULL          | Start time of the slot                       |
| end_time      | TIME         | NOT NULL          | End time of the slot                         |
| is_available  | BOOLEAN      | NOT NULL          | Whether the slot is still available          |
| created_at    | TIMESTAMP    | NOT NULL          | When the slot was created                    |
| updated_at    | TIMESTAMP    | NOT NULL          | When the slot was last updated               |

Notes:
- `doctor_id` references the Doctors table
- When an appointment is booked, the corresponding slot's `is_available` is set to false
- The combination of `doctor_id`, `date`, `start_time` should be unique

---

## 6. ChatMessages

Stores the chat history between users and the CuraBot.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the message            |
| user_id       | UUID         | FK, NOT NULL      | Reference to Users table                     |
| sender        | ENUM         | NOT NULL          | 'user' or 'bot'                              |
| text          | TEXT         | NOT NULL          | Content of the message                       |
| timestamp     | TIMESTAMP    | NOT NULL          | When the message was sent                    |
| session_id    | UUID         | NOT NULL          | Identifier for the chat session              |

Notes:
- `user_id` references the Users table
- `session_id` groups messages into conversations
- This table stores the conversation history for reference and potential training

---

## 7. Symptoms

Stores a catalog of symptoms that can be recognized by the system.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the symptom            |
| name          | VARCHAR(255) | UNIQUE, NOT NULL  | Name of the symptom                          |
| description   | TEXT         |                   | Description of the symptom                   |
| keywords      | TEXT         |                   | Related keywords for better matching         |
| created_at    | TIMESTAMP    | NOT NULL          | When the symptom was created                 |
| updated_at    | TIMESTAMP    | NOT NULL          | When the symptom was last updated            |

Notes:
- This table will be pre-populated with common symptoms
- The `keywords` field can store comma-separated terms to improve symptom recognition

---

## 8. SymptomSpecialtyMapping

Maps symptoms to the most appropriate medical specialties.

| Column        | Type         | Constraints       | Description                                  |
|---------------|--------------|-------------------|----------------------------------------------|
| id            | UUID         | PK, NOT NULL      | Unique identifier for the mapping            |
| symptom_id    | UUID         | FK, NOT NULL      | Reference to Symptoms table                  |
| specialty_id  | UUID         | FK, NOT NULL      | Reference to Specialties table               |
| weight        | INTEGER      | NOT NULL          | Weight/priority of this mapping (1-10)       |
| created_at    | TIMESTAMP    | NOT NULL          | When the mapping was created                 |
| updated_at    | TIMESTAMP    | NOT NULL          | When the mapping was last updated            |

Notes:
- `symptom_id` references the Symptoms table
- `specialty_id` references the Specialties table
- The `weight` field indicates the strength of the association between the symptom and specialty

---

## Additional Notes

### AI Chatbot Implementation
- The CuraBot chatbot will be implemented using Groq for AI processing
- The backend will need to integrate with Groq's API for processing user messages
- The chat history stored in the ChatMessages table can be used for context in AI conversations
- The Symptoms and SymptomSpecialtyMapping tables will help with symptom recognition and specialty recommendation

### Indexing Strategy
- Create indexes on all foreign keys
- Create composite indexes on frequently queried combinations (e.g., doctor_id + date)
- Consider full-text search indexes on the Symptoms table for keyword matching

### Data Relationships
1. Users (1) → (0..1) Doctors
2. Specialties (1) → (N) Doctors
3. Users (1) → (N) Appointments (as patients)
4. Doctors (1) → (N) Appointments
5. Doctors (1) → (N) AvailableSlots
6. Symptoms (N) ↔ (M) Specialties (via SymptomSpecialtyMapping)
7. Users (1) → (N) ChatMessages

### Security Considerations
- Store only password hashes, never plain text passwords
- Implement role-based access control using the `role` field in Users
- Encrypt sensitive patient information
- Implement proper authentication and authorization for all API endpoints
